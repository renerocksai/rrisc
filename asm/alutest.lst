; -------------------
; -- ALU test prog --
; -- for RRISC ALU --
; -------------------

; -------------------
; -- ALU constants --
; -- for RRISC ALU --
; -------------------

const ALU_ADD  =  0    ; addition with carry, sets carry (gt)
const ALU_SUB  =  1    ; subtraction with carry, sets carry(gt)
const ALU_SHL  =  2    ; shift left into carry, sets carry(gt)
const ALU_SHR  =  3    ; shift right into carry, sets carry(gt)
const ALU_ROL  =  4    ; rotate left
const ALU_ROR  =  5    ; rotate right
const ALU_OR   =  6    ; binary or
const ALU_AND  =  7    ; binary and
const ALU_NAND =  8    ; binary not and
const ALU_XOR  =  9    ; binary exclusive or
const ALU_XNOR = 10    ; binary exclusive not or
const ALU_CMP  = 11    ; compare, sets carry (gt), sm, eq flags
const ALU_INC  = 12    ; increments A by 1, sets equal (zero) flag on zero
const ALU_DEC  = 13    ; decrements A by 1, sets equal (zero) flag on zero

; --
; -- port I/O mapping of ALU registers
; --
const ALU_PORT_A      = $fffc
const ALU_PORT_B      = $fffd
const ALU_PORT_INSTR  = $fffe
const ALU_PORT_RESULT = $ffff

; --
; -- ALU convenience macros
; --






org 0

lda # $01
; > 0000: 0a 01 00

ldb # $05
; > 0003: 12 05 00


ldb # $03 : EQ  ; should not execute
; > 0006: 52 03 00

; because EQ (zero)
; flag isn't set

out A, ALU_PORT_A
; > 0009: 0d fc ff

out B, ALU_PORT_B
; > 000c: 15 fd ff

ldg # ALU_ADD
; > 000f: 3a 00 00

out G, ALU_PORT_INSTR
; > 0012: 3d fe ff

in A, ALU_PORT_RESULT
; > 0015: 0c ff ff

; (A = 6)
ldb # $06       ; B = 6
; > 0018: 12 06 00


;  if A == B
;      then C = $01
;      else C = $ff
ldc # $ff       ; C = $ff
; > 001b: 1a ff 00

out A, ALU_PORT_A
; > 001e: 0d fc ff

out B, ALU_PORT_B
; > 0021: 15 fd ff

ldg # ALU_CMP
; > 0024: 3a 0b 00

out G, ALU_PORT_INSTR
; > 0027: 3d fe ff

; result will be in flags!
ldc # $01 : EQ  ; C = $01 if EQual
; > 002a: 5a 01 00


:forever
jmp forever
; > 002d: 02 2d 00


; we expect:
; A = 6
; B = 6
; C = 1

