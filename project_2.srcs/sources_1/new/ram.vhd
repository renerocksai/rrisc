----------------------------------------------------------------------------------
--
-- Engineer: Rene Schallner
-- 
-- Create Date: 12/29/2020 
-- Description: 
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- debug stuff
use work.debug.ALL;

-- we will run the following program in our fake ram:
--
--    ; -------------------------------
--    ; --  Arty S7 board test prog  --
--    ; --   for RRISC ALU on FPGA   --
--    ; -------------------------------
--    
--    include arty.inc
--    const my_delay = $0100 ; gives us 500ms
--    
--    org 0
--    
--    MACRODEF LEFT
--    out a, LED_PORT
--    ldb # ALU_ROL
--    out a, ALU_PORT_A
--    out g, ALU_PORT_INSTR
--    in a, ALU_PORT_RESULT
--    ENDMACRO
--    
--    MACRODEF RIGHT
--    out a, LED_PORT
--    ldb # ALU_ROR
--    out a, ALU_PORT_A
--    out g, ALU_PORT_INSTR
--    in a, ALU_PORT_RESULT
--    ENDMACRO
--    
--    ; running light
--    :loop
--    lda #$01
--    macro LEFT
--    macro DELAY my_delay
--    macro LEFT
--    macro DELAY my_delay
--    macro LEFT
--    macro DELAY my_delay
--    macro DELAY my_delay
--    macro RIGHT
--    macro DELAY my_delay
--    macro RIGHT
--    macro DELAY my_delay
--    macro RIGHT
--    macro DELAY my_delay
--    macro DELAY my_delay
--    jmp loop
--
-- This translates to:

--    00000000  0a 01 00 0d fa ff 12 04  00 0d fc ff 3d fe ff 0c  |............=...|
--    00000010  ff ff 32 00 00 2a 01 00  22 da 00 1a 10 00 25 fc  |..2..*..".....%.|
--    00000020  ff 3a 0d 00 3d fe ff 24  ff ff 42 30 00 02 1e 00  |.:..=..$..B0....|
--    00000030  1d fc ff 1c ff ff 42 3c  00 02 1e 00 35 fc ff 34  |......B<....5..4|
--    00000040  ff ff 42 48 00 02 18 00  2d fc ff 2c ff ff 42 54  |..BH....-..,..BT|
--    00000050  00 02 18 00 0d fa ff 12  04 00 0d fc ff 3d fe ff  |.............=..|
--    00000060  0c ff ff 32 00 00 2a 01  00 22 da 00 1a 10 00 25  |...2..*..".....%|
--    00000070  fc ff 3a 0d 00 3d fe ff  24 ff ff 42 81 00 02 6f  |..:..=..$..B...o|
--    00000080  00 1d fc ff 1c ff ff 42  8d 00 02 6f 00 35 fc ff  |.......B...o.5..|
--    00000090  34 ff ff 42 99 00 02 69  00 2d fc ff 2c ff ff 42  |4..B...i.-..,..B|
--    000000a0  a5 00 02 69 00 0d fa ff  12 04 00 0d fc ff 3d fe  |...i..........=.|
--    000000b0  ff 0c ff ff 32 00 00 2a  01 00 22 da 00 1a 10 00  |....2..*..".....|
--    000000c0  25 fc ff 3a 0d 00 3d fe  ff 24 ff ff 42 d2 00 02  |%..:..=..$..B...|
--    000000d0  c0 00 1d fc ff 1c ff ff  42 de 00 02 c0 00 35 fc  |........B.....5.|
--    000000e0  ff 34 ff ff 42 ea 00 02  ba 00 2d fc ff 2c ff ff  |.4..B.....-..,..|
--    000000f0  42 f6 00 02 ba 00 32 00  00 2a 01 00 22 da 00 1a  |B.....2..*.."...|
--    00000100  10 00 25 fc ff 3a 0d 00  3d fe ff 24 ff ff 42 14  |..%..:..=..$..B.|
--    00000110  01 02 02 01 1d fc ff 1c  ff ff 42 20 01 02 02 01  |..........B ....|
--    00000120  35 fc ff 34 ff ff 42 2c  01 02 fc 00 2d fc ff 2c  |5..4..B,....-..,|
--    00000130  ff ff 42 38 01 02 fc 00  32 00 00 2a 01 00 22 da  |..B8....2..*..".|
--    00000140  00 1a 10 00 25 fc ff 3a  0d 00 3d fe ff 24 ff ff  |....%..:..=..$..|
--    00000150  42 56 01 02 44 01 1d fc  ff 1c ff ff 42 62 01 02  |BV..D.......Bb..|
--    00000160  44 01 35 fc ff 34 ff ff  42 6e 01 02 3e 01 2d fc  |D.5..4..Bn..>.-.|
--    00000170  ff 2c ff ff 42 7a 01 02  3e 01 0d fa ff 12 05 00  |.,..Bz..>.......|
--    00000180  0d fc ff 3d fe ff 0c ff  ff 32 00 00 2a 01 00 22  |...=.....2..*.."|
--    00000190  da 00 1a 10 00 25 fc ff  3a 0d 00 3d fe ff 24 ff  |.....%..:..=..$.|
--    000001a0  ff 42 a7 01 02 95 01 1d  fc ff 1c ff ff 42 b3 01  |.B...........B..|
--    000001b0  02 95 01 35 fc ff 34 ff  ff 42 bf 01 02 8f 01 2d  |...5..4..B.....-|
--    000001c0  fc ff 2c ff ff 42 cb 01  02 8f 01 0d fa ff 12 05  |..,..B..........|
--    000001d0  00 0d fc ff 3d fe ff 0c  ff ff 32 00 00 2a 01 00  |....=.....2..*..|
--    000001e0  22 da 00 1a 10 00 25 fc  ff 3a 0d 00 3d fe ff 24  |".....%..:..=..$|
--    000001f0  ff ff 42 f8 01 02 e6 01  1d fc ff 1c ff ff 42 04  |..B...........B.|
--    00000200  02 02 e6 01 35 fc ff 34  ff ff 42 10 02 02 e0 01  |....5..4..B.....|
--    00000210  2d fc ff 2c ff ff 42 1c  02 02 e0 01 0d fa ff 12  |-..,..B.........|
--    00000220  05 00 0d fc ff 3d fe ff  0c ff ff 32 00 00 2a 01  |.....=.....2..*.|
--    00000230  00 22 da 00 1a 10 00 25  fc ff 3a 0d 00 3d fe ff  |.".....%..:..=..|
--    00000240  24 ff ff 42 49 02 02 37  02 1d fc ff 1c ff ff 42  |$..BI..7.......B|
--    00000250  55 02 02 37 02 35 fc ff  34 ff ff 42 61 02 02 31  |U..7.5..4..Ba..1|
--    00000260  02 2d fc ff 2c ff ff 42  6d 02 02 31 02 32 00 00  |.-..,..Bm..1.2..|
--    00000270  2a 01 00 22 da 00 1a 10  00 25 fc ff 3a 0d 00 3d  |*..".....%..:..=|
--    00000280  fe ff 24 ff ff 42 8b 02  02 79 02 1d fc ff 1c ff  |..$..B...y......|
--    00000290  ff 42 97 02 02 79 02 35  fc ff 34 ff ff 42 a3 02  |.B...y.5..4..B..|
--    000002a0  02 73 02 2d fc ff 2c ff  ff 42 af 02 02 73 02 02  |.s.-..,..B...s..|
--    000002b0  00 00                                             |..|

entity ram is
    port(
    -- reset and clock
    rst         :   IN    std_logic;    -- RESET
    clk         :   IN    std_logic;    -- clock

    ram_ld_val  :   IN   std_logic_vector (7 downto 0);
    write       :   IN   std_logic;
    addr        :   IN   std_logic_vector (15 downto 0);
    ram_out     :   OUT  std_logic_vector (7 downto 0)
);
end ram;

architecture Behavioral of ram is
    type ram_mem_t is array (0 to 1023) of std_logic_vector (7 downto 0);

    -- signals",
    signal mem :ram_mem_t := (

        "00001010", "00000000", "00000000", "00001101", "11111010", "11111111", "00010100", "11111000", 
        "11111111", "00010101", "11111100", "11111111", "00010010", "00000001", "00000000", "00010101", 
        "11111101", "11111111", "00010010", "00000111", "00000000", "00010101", "11111110", "11111111", 
        "00010100", "11111111", "11111111", "01000010", "00000000", "00000000", "00001010", "00000001", 
        "00000000", "00001101", "11111010", "11111111", "00001101", "11111100", "11111111", "00010010", 
        "00000100", "00000000", "00010101", "11111110", "11111111", "00001100", "11111111", "11111111", 
        "00110010", "11001010", "00000000", "00101010", "00000001", "00000000", "00100010", "11011010", 
        "00000000", "00011010", "00010000", "00000000", "00100101", "11111100", "11111111", "00111010", 
        "00001101", "00000000", "00111101", "11111110", "11111111", "00100100", "11111111", "11111111", 
        "01000010", "01001110", "00000000", "00000010", "00111100", "00000000", "00011101", "11111100", 
        "11111111", "00011100", "11111111", "11111111", "01000010", "01011010", "00000000", "00000010", 
        "00111100", "00000000", "00110101", "11111100", "11111111", "00110100", "11111111", "11111111", 
        "01000010", "01100110", "00000000", "00000010", "00110110", "00000000", "00101101", "11111100", 
        "11111111", "00101100", "11111111", "11111111", "01000010", "01110010", "00000000", "00000010", 
        "00110110", "00000000", "00001101", "11111010", "11111111", "00001101", "11111100", "11111111", 
        "00010010", "00000100", "00000000", "00010101", "11111110", "11111111", "00001100", "11111111", 
        "11111111", "00110010", "11001010", "00000000", "00101010", "00000001", "00000000", "00100010", 
        "11011010", "00000000", "00011010", "00010000", "00000000", "00100101", "11111100", "11111111", 
        "00111010", "00001101", "00000000", "00111101", "11111110", "11111111", "00100100", "11111111", 
        "11111111", "01000010", "10011111", "00000000", "00000010", "10001101", "00000000", "00011101", 
        "11111100", "11111111", "00011100", "11111111", "11111111", "01000010", "10101011", "00000000", 
        "00000010", "10001101", "00000000", "00110101", "11111100", "11111111", "00110100", "11111111", 
        "11111111", "01000010", "10110111", "00000000", "00000010", "10000111", "00000000", "00101101", 
        "11111100", "11111111", "00101100", "11111111", "11111111", "01000010", "11000011", "00000000", 
        "00000010", "10000111", "00000000", "00001101", "11111010", "11111111", "00001101", "11111100", 
        "11111111", "00010010", "00000100", "00000000", "00010101", "11111110", "11111111", "00001100", 
        "11111111", "11111111", "00110010", "11001010", "00000000", "00101010", "00000001", "00000000", 
        "00100010", "11011010", "00000000", "00011010", "00010000", "00000000", "00100101", "11111100", 
        "11111111", "00111010", "00001101", "00000000", "00111101", "11111110", "11111111", "00100100", 
        "11111111", "11111111", "01000010", "11110000", "00000000", "00000010", "11011110", "00000000", 
        "00011101", "11111100", "11111111", "00011100", "11111111", "11111111", "01000010", "11111100", 
        "00000000", "00000010", "11011110", "00000000", "00110101", "11111100", "11111111", "00110100", 
        "11111111", "11111111", "01000010", "00001000", "00000001", "00000010", "11011000", "00000000", 
        "00101101", "11111100", "11111111", "00101100", "11111111", "11111111", "01000010", "00010100", 
        "00000001", "00000010", "11011000", "00000000", "00001101", "11111010", "11111111", "00001101", 
        "11111100", "11111111", "00010010", "00000100", "00000000", "00010101", "11111110", "11111111", 
        "00001100", "11111111", "11111111", "00110010", "11001010", "00000000", "00101010", "00000001", 
        "00000000", "00100010", "11011010", "00000000", "00011010", "00010000", "00000000", "00100101", 
        "11111100", "11111111", "00111010", "00001101", "00000000", "00111101", "11111110", "11111111", 
        "00100100", "11111111", "11111111", "01000010", "01000001", "00000001", "00000010", "00101111", 
        "00000001", "00011101", "11111100", "11111111", "00011100", "11111111", "11111111", "01000010", 
        "01001101", "00000001", "00000010", "00101111", "00000001", "00110101", "11111100", "11111111", 
        "00110100", "11111111", "11111111", "01000010", "01011001", "00000001", "00000010", "00101001", 
        "00000001", "00101101", "11111100", "11111111", "00101100", "11111111", "11111111", "01000010", 
        "01100101", "00000001", "00000010", "00101001", "00000001", "00001101", "11111010", "11111111", 
        "00001101", "11111100", "11111111", "00010010", "00000101", "00000000", "00010101", "11111110", 
        "11111111", "00001100", "11111111", "11111111", "00001101", "11111010", "11111111", "00001101", 
        "11111100", "11111111", "00010010", "00000101", "00000000", "00010101", "11111110", "11111111", 
        "00001100", "11111111", "11111111", "00001101", "11111010", "11111111", "00001101", "11111100", 
        "11111111", "00010010", "00000101", "00000000", "00010101", "11111110", "11111111", "00001100", 
        "11111111", "11111111", "00110010", "11001010", "00000000", "00101010", "00000001", "00000000", 
        "00100010", "11011010", "00000000", "00011010", "00010000", "00000000", "00100101", "11111100", 
        "11111111", "00111010", "00001101", "00000000", "00111101", "11111110", "11111111", "00100100", 
        "11111111", "11111111", "01000010", "10110000", "00000001", "00000010", "10011110", "00000001", 
        "00011101", "11111100", "11111111", "00011100", "11111111", "11111111", "01000010", "10111100", 
        "00000001", "00000010", "10011110", "00000001", "00110101", "11111100", "11111111", "00110100", 
        "11111111", "11111111", "01000010", "11001000", "00000001", "00000010", "10011000", "00000001", 
        "00101101", "11111100", "11111111", "00101100", "11111111", "11111111", "01000010", "11010100", 
        "00000001", "00000010", "10011000", "00000001", "00001101", "11111010", "11111111", "00001101", 
        "11111100", "11111111", "00010010", "00000101", "00000000", "00010101", "11111110", "11111111", 
        "00001100", "11111111", "11111111", "00110010", "11001010", "00000000", "00101010", "00000001", 
        "00000000", "00100010", "11011010", "00000000", "00011010", "00010000", "00000000", "00100101", 
        "11111100", "11111111", "00111010", "00001101", "00000000", "00111101", "11111110", "11111111", 
        "00100100", "11111111", "11111111", "01000010", "00000001", "00000010", "00000010", "11101111", 
        "00000001", "00011101", "11111100", "11111111", "00011100", "11111111", "11111111", "01000010", 
        "00001101", "00000010", "00000010", "11101111", "00000001", "00110101", "11111100", "11111111", 
        "00110100", "11111111", "11111111", "01000010", "00011001", "00000010", "00000010", "11101001", 
        "00000001", "00101101", "11111100", "11111111", "00101100", "11111111", "11111111", "01000010", 
        "00100101", "00000010", "00000010", "11101001", "00000001", "00001101", "11111010", "11111111", 
        "00001101", "11111100", "11111111", "00010010", "00000101", "00000000", "00010101", "11111110", 
        "11111111", "00001100", "11111111", "11111111", "00000010", "00000000", "00000000",



        -- filler
                                                                                            "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000",
        "11001101", "00000010", "00000010", "10010001", "00000010", "00000010", "00000000", "00000000"

    );
    signal myval : std_logic_vector (7 downto 0) := "11111111";
    constant zero : std_logic_vector(7 downto 0) := "00000000";

begin
    ramproc : process (rst, clk)
    begin
        if rst = '1' then
            myval <= zero;
        elsif rising_edge(clk) then
            if write = '1' then
                mem(to_integer(unsigned(addr(9 downto 0)))) <= ram_ld_val;
                myval <= ram_ld_val;
                report "> ram " & integer'image(to_integer(unsigned(addr(9 downto 0)))) & " : " & integer'image(to_integer(unsigned(ram_ld_val))) ;
            else
                report "< ram addr " & integer'image(to_integer(unsigned(addr(9 downto 0)))) ;
                report "< ram " & integer'image(to_integer(unsigned(addr(9 downto 0))))  & " : " & integer'image(to_integer(unsigned(mem(to_integer(unsigned(addr(9 downto 0))))))) ;
                myval <= mem(to_integer(unsigned(addr(9 downto 0))));
            end if;
        end if;
    end process ramproc;

    -- concurrent stuff
    ram_out <= myval;

    -- debug
    debug_mem(0) <= mem(0);
    debug_mem(1) <= mem(1);
    debug_mem(2) <= mem(2);
    debug_mem(3) <= mem(3);
    debug_mem(4) <= mem(4);
    debug_mem(5) <= mem(5);
    debug_mem(6) <= mem(6);
    debug_mem(7) <= mem(7);
    debug_mem(8) <= mem(8);
    debug_mem(9) <= mem(9);
    debug_mem(10) <= mem(10);
    debug_mem(11) <= mem(11);
    debug_mem(12) <= mem(12);
    debug_mem(13) <= mem(13);
    debug_mem(14) <= mem(14);
    debug_mem(15) <= mem(15);
    debug_mem(16) <= mem(16);
    debug_mem(17) <= mem(17);
    debug_mem(18) <= mem(18);
    debug_mem(19) <= mem(19);
    debug_mem(20) <= mem(20);
    debug_mem(21) <= mem(21);
    debug_mem(22) <= mem(22);
    debug_mem(23) <= mem(23);
    debug_mem(24) <= mem(24);
    debug_mem(25) <= mem(25);
    debug_mem(26) <= mem(26);
    debug_mem(27) <= mem(27);
    debug_mem(27) <= mem(27);
    debug_mem(28) <= mem(28);
    debug_mem(29) <= mem(29);
    debug_mem(30) <= mem(30);
    debug_mem(31) <= mem(31);
end Behavioral;


