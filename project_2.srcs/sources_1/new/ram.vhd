----------------------------------------------------------------------------------
--
-- Engineer: Rene Schallner
-- 
-- Create Date: 12/29/2020 
-- Description: 
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- debug stuff
use work.debug.ALL;

-- we will run the following program in our fake ram:
--
--    ; -------------------------------
--    ; --  Arty S7 board test prog  --
--    ; --   for RRISC ALU on FPGA   --
--    ; -------------------------------
--    
--    include arty.inc
--    const my_delay = $0100 ; gives us 500ms
--    
--    org 0
--    
--    MACRODEF LEFT
--    out a, LED_PORT
--    macro DELAY my_delay
--    ldb # ALU_ROL
--    out a, ALU_PORT_A
--    out g, ALU_PORT_INSTR
--    in a, ALU_PORT_RESULT
--    ENDMACRO
--    
--    MACRODEF RIGHT
--    out a, LED_PORT
--    macro DELAY my_delay
--    ldb # ALU_ROR
--    out a, ALU_PORT_A
--    out g, ALU_PORT_INSTR
--    in a, ALU_PORT_RESULT
--    ENDMACRO
--    
--    ; running light
--    :loop
--    lda #$01
--    macro LEFT
--    macro LEFT
--    macro LEFT
--    macro DELAY my_delay
--    macro RIGHT
--    macro RIGHT
--    macro RIGHT
--    macro DELAY my_delay
--    jmp loop
--
-- This translates to:
--    00000000  0a 01 00 0d fa ff 12 00  00 0d 00 00 3d 00 00 0c  |............=...|
--    00000010  00 00 0d fa ff 12 00 00  0d 00 00 3d 00 00 0c 00  |...........=....|
--    00000020  00 0d fa ff 12 00 00 0d  00 00 3d 00 00 0c 00 00  |..........=.....|
--    00000030  22 da 00 1a 10 00 25 00  00 3a 00 00 3d 00 00 24  |".....%..:..=..$|
--    00000040  00 00 42 00 00 02 36 00  1d 00 00 1c 00 00 42 00  |..B...6.......B.|
--    00000050  00 02 36 00 35 00 00 34  00 00 42 00 00 02 30 00  |..6.5..4..B...0.|
--    00000060  2d 00 00 2c 00 00 42 00  00 02 30 00 0d fa ff 12  |-..,..B...0.....|
--    00000070  00 00 0d 00 00 3d 00 00  0c 00 00 0d fa ff 12 00  |.....=..........|
--    00000080  00 0d 00 00 3d 00 00 0c  00 00 0d fa ff 12 00 00  |....=...........|
--    00000090  0d 00 00 3d 00 00 0c 00  00 22 da 00 1a 10 00 25  |...=.....".....%|
--    000000a0  00 00 3a 00 00 3d 00 00  24 00 00 42 00 00 02 9f  |..:..=..$..B....|
--    000000b0  00 1d 00 00 1c 00 00 42  00 00 02 9f 00 35 00 00  |.......B.....5..|
--    000000c0  34 00 00 42 00 00 02 99  00 2d 00 00 2c 00 00 42  |4..B.....-..,..B|
--    000000d0  00 00 02 99 00 02 00 00                           |........|

entity ram is
    port(
    -- reset and clock
    rst         :   IN    std_logic;    -- RESET
    clk         :   IN    std_logic;    -- clock

    ram_ld_val  :   IN   std_logic_vector (7 downto 0);
    write       :   IN   std_logic;
    addr        :   IN   std_logic_vector (7 downto 0);
    ram_out     :   OUT  std_logic_vector (7 downto 0)
);
end ram;

architecture Behavioral of ram is
    type ram_mem_t is array (0 to 216) of std_logic_vector (7 downto 0);

    -- signals",
    signal mem :ram_mem_t := (
        "00001010", "00000001", "00000000", "00001101", "11111010", "11111111", "00010010", "00000000",
        "00000000", "00001101", "00000000", "00000000", "00111101", "00000000", "00000000", "00001100",
        "00000000", "00000000", "00001101", "11111010", "11111111", "00010010", "00000000", "00000000",
        "00001101", "00000000", "00000000", "00111101", "00000000", "00000000", "00001100", "00000000",
        "00000000", "00001101", "11111010", "11111111", "00010010", "00000000", "00000000", "00001101",
        "00000000", "00000000", "00111101", "00000000", "00000000", "00001100", "00000000", "00000000",
        "00100010", "11011010", "00000000", "00011010", "00010000", "00000000", "00100101", "00000000",
        "00000000", "00111010", "00000000", "00000000", "00111101", "00000000", "00000000", "00100100",
        "00000000", "00000000", "01000010", "00000000", "00000000", "00000010", "00110110", "00000000",
        "00011101", "00000000", "00000000", "00011100", "00000000", "00000000", "01000010", "00000000",
        "00000000", "00000010", "00110110", "00000000", "00110101", "00000000", "00000000", "00110100",
        "00000000", "00000000", "01000010", "00000000", "00000000", "00000010", "00110000", "00000000",
        "00101101", "00000000", "00000000", "00101100", "00000000", "00000000", "01000010", "00000000",
        "00000000", "00000010", "00110000", "00000000", "00001101", "11111010", "11111111", "00010010",
        "00000000", "00000000", "00001101", "00000000", "00000000", "00111101", "00000000", "00000000",
        "00001100", "00000000", "00000000", "00001101", "11111010", "11111111", "00010010", "00000000",
        "00000000", "00001101", "00000000", "00000000", "00111101", "00000000", "00000000", "00001100",
        "00000000", "00000000", "00001101", "11111010", "11111111", "00010010", "00000000", "00000000",
        "00001101", "00000000", "00000000", "00111101", "00000000", "00000000", "00001100", "00000000",
        "00000000", "00100010", "11011010", "00000000", "00011010", "00010000", "00000000", "00100101",
        "00000000", "00000000", "00111010", "00000000", "00000000", "00111101", "00000000", "00000000",
        "00100100", "00000000", "00000000", "01000010", "00000000", "00000000", "00000010", "10011111",
        "00000000", "00011101", "00000000", "00000000", "00011100", "00000000", "00000000", "01000010",
        "00000000", "00000000", "00000010", "10011111", "00000000", "00110101", "00000000", "00000000",
        "00110100", "00000000", "00000000", "01000010", "00000000", "00000000", "00000010", "10011001",
        "00000000", "00101101", "00000000", "00000000", "00101100", "00000000", "00000000", "01000010",
        "00000000", "00000000", "00000010", "10011001", "00000000", "00000010", "00000000", "00000000",

        "00000000"

    );
    signal myval : std_logic_vector (7 downto 0) := "11111111";
    constant zero : std_logic_vector(7 downto 0) := "00000000";

begin
    regproc : process (rst, clk)
    begin
        if rst = '1' then
            myval <= zero;
        elsif rising_edge(clk) then
            if write = '1' then
                mem(to_integer(unsigned(addr))) <= ram_ld_val;
                myval <= ram_ld_val;
                report "> ram " & integer'image(to_integer(unsigned(addr))) & " : " & integer'image(to_integer(unsigned(ram_ld_val))) ;
            else
                report "< ram " & integer'image(to_integer(unsigned(addr))); --  & " : " & integer'image(to_integer(unsigned(ram_ld_val))) ;
                myval <= mem(to_integer(unsigned(addr)));
            end if;
        end if;
    end process regproc;

    -- concurrent stuff
    ram_out <= myval;

    -- debug
    debug_mem(0) <= mem(0);
    debug_mem(1) <= mem(1);
    debug_mem(2) <= mem(2);
    debug_mem(3) <= mem(3);
    debug_mem(4) <= mem(4);
    debug_mem(5) <= mem(5);
    debug_mem(6) <= mem(6);
    debug_mem(7) <= mem(7);
    debug_mem(8) <= mem(8);
    debug_mem(9) <= mem(9);
    debug_mem(10) <= mem(10);
    debug_mem(11) <= mem(11);
    debug_mem(12) <= mem(12);
    debug_mem(13) <= mem(13);
    debug_mem(14) <= mem(14);
    debug_mem(15) <= mem(15);
    debug_mem(16) <= mem(16);
    debug_mem(17) <= mem(17);
    debug_mem(18) <= mem(18);
    debug_mem(19) <= mem(19);
    debug_mem(20) <= mem(20);
    debug_mem(21) <= mem(21);
    debug_mem(22) <= mem(22);
    debug_mem(23) <= mem(23);
    debug_mem(24) <= mem(24);
    debug_mem(25) <= mem(25);
    debug_mem(26) <= mem(26);
    debug_mem(27) <= mem(27);
    debug_mem(27) <= mem(27);
    debug_mem(28) <= mem(28);
    debug_mem(29) <= mem(29);
    debug_mem(30) <= mem(30);
    debug_mem(31) <= mem(31);
end Behavioral;


